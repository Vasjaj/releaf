:ruby
  label_opts  = get_template_label_options    local_assigns, { :translation_name => name.to_s.sub(/_id$/, '').to_s }
  input_attrs = get_template_input_attributes local_assigns
  field_attrs = get_template_field_attributes local_assigns

  select_params = [name]

  relation_name = name.to_s.sub(/_id$/, '').to_sym

  if local_assigns.key? :select_options
    if select_options.is_a? Array
      select_params.push options_for_select(select_options, f.object.send(name))
    else
      select_params.push select_options
    end
  else
    collection = f.object.class.reflect_on_association(relation_name).try(:klass).try(:all)
    select_params.push options_from_collection_for_select(collection, :id, resource_to_text_method(collection.first), f.object.send(name))
  end

  select_helper_options = local_assigns.fetch(:options, {})

  rel = f.object.send(relation_name)
  unless local_assigns.key? :include_blank
    include_blank = true
    f.object.class.validators_on(name).each do |validator|
      next unless validator.is_a? ActiveModel::Validations::PresenceValidator

      # if new record, or object is missing (was deleted)
      include_blank = f.object.new_record? || f.object.send(relation_name).blank?
      break
    end
  end

  select_helper_options.merge!({:include_blank => include_blank})

  select_params.push select_helper_options
  select_params.push input_attrs

.field.type_item{field_attrs}
  = render "edit.field_label", label_opts
  .value><= f.select *select_params
  .clear
