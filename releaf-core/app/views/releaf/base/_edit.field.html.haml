:ruby
  label_options     = local_assigns.fetch(:label_options, {})
  input_attributes  = local_assigns.fetch(:input_attributes, {})
  field_attributes  = local_assigns.fetch(:field_attributes, {})

  # if view_prefix is not set, most likely we came from custom partial.
  # To prevent infinit loop, we set view prefix to something that will prevent
  # us from making infinite loop
  view_prefix = local_assigns.fetch(:view_prefix, 'edit.field_custom_')


  name_without_id_or_type = name.to_s.sub(/_(id|type)$/, '')
  opts = {
    :f                => f,
    :name             => name,
    :view_prefix      => view_prefix,
    :label_options    => label_options,
    :field_attributes => field_attributes,
    :input_attributes => input_attributes
  }


- if f.object.class.reflect_on_association(name_without_id_or_type).try(:options).try('[]', :polymorphic) == true
  -# name =~ /_id$/ is required to prevent user template from being renedred 2x times:
  -# first time for _id field, second time for _type field
  - if name =~ /_id$/ && has_template?( "_#{view_prefix}.#{name_without_id_or_type}" )
    = render "#{view_prefix}.#{name_without_id_or_type}", opts

- else
  - if has_template? "_#{view_prefix}.#{name}"
    = render "#{view_prefix}.#{name}", opts
  - else

    - field_type_name = Releaf::TemplateFieldTypeMapper.field_type_name(f.object, name)
    - use_i18n = Releaf::TemplateFieldTypeMapper.use_i18n?(f.object, name)

    - if use_i18n and has_template?( "_edit.field_type_#{field_type_name}_i18n" )
      = render "edit.field_type_#{field_type_name}_i18n", opts

    - elsif has_template? "_edit.field_type_#{field_type_name}"
      = render "edit.field_type_#{field_type_name}", opts

    - else
      = render "edit.field_type_text", opts
