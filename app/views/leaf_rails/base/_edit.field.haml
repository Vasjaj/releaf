:ruby
  collection = nil
  input_type = 'text'

  case name
  when /_id$/
    if @item.class.respond_to?(:reflect_on_association)
      if name =~ /_id\z/ && @item.class.reflect_on_association(name.sub(/_id$/, '').to_sym)
        collection = @item.class.reflect_on_association(name.sub(/_id$/, '').to_sym).try(:klass).try(:all)
      end

      collection = @item.class.reflect_on_association(name.to_sym).try(:klass).try(:all) if collection.nil?
      input_type = 'select' unless collection.nil?
    end
  when /(image|photo|picture|avatar|logo|icon)_uid$/
    # FIXME should check if it's a dragonfly field
    input_type = 'image'
  when /_uid$/
    # FIXME should check if it's a dragonfly field
    input_type = 'file'
  when /password/
    input_type = 'password'
  else
    column_type = @item.class.columns_hash[ name ].try(:type) || :string
    case column_type
    when :boolean
      input_type = 'checkbox'
    when :text
      if name.end_with?( '_html' )
        input_type = 'richtext'
      else
        input_type = 'textarea'
      end
    end
  end



- if @controller.has_template( "_edit.field.type_#{input_type}" ) && input_type == 'select'
  :ruby
    text_field = :to_text unless text_field
    include_blank = nil unless include_blank

    if include_blank.nil?
      if @item.send(name).nil?
        include_blank = true
      else
        include_blank = true
        @item.class.validators_on(name).each do |validator|
          if validator.is_a? ActiveModel::Validations::PresenceValidator
            include_blank = false
            break
          end
        end
      end
    end

  = render "edit.field.type_select", :name => name, :select_options => options_from_collection_for_select(collection, :id, text_field.to_sym, @item.send(name) ), :options => { :include_blank => include_blank }
- elsif @controller.has_template( "_edit.field.type_#{input_type}" )
  = render "edit.field.type_#{input_type}", :name => name
- else
  - input_type = @controller.input_type_for( 'string', name )
  = render "edit.field.type_#{input_type}", :name => name
