- if has_template? "_#{view_prefix}.#{field}"
  = render "#{view_prefix}.#{field}", :resource => resource, :name => field

- else
  - new_view_prefix = view_prefix + '.' + field


  - case reflection.macro
  - when :has_many
    .nested_wrap{:'data-name' => field}
      .nested_title= t(field, :scope => controller_scope_name)
      .list
        - resource.send(field).each do |subresource|
          .resource
            = render 'show.fields.has_many_template', :resource => subresource, :subfields => subfields, :view_prefix => new_view_prefix, :field => field

  - when :belongs_to
    .nested_wrap{:'data-name' => field}
      .nested_title= t(field, :scope => controller_scope_name)
      .item

        - subitem = resource.send(field)

        - if subfields.is_a? Array
          - subfields.each do |subfield|
            - if has_template? "_#{new_view_prefix}.#{subfield}"
              = render "#{new_view_prefix}.#{subfield}", :resource => resource, :name => subfield
            - else
              = render 'show.fields', :resource => subresource, :fields => subfields, :view_prefix => new_view_prefix

        - elsif subfields.is_a? String or subfields.is_a? Symbol
          - if has_template? "_#{new_view_prefix}.#{field}"
            = render "#{new_view_prefix}.#{field}", :resource => resource, :name => field
          - else
            = render 'show.field', :resource => subresource, :name => field, :view_prefix => new_view_prefix

